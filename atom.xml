<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Nikhil Dabas</title><link href="http://www.nikhildabas.com/atom.xml" rel="self" /><link href="http://www.nikhildabas.com/" /><updated>2013-08-06T23:07:00.0693344Z</updated><id>http://www.nikhildabas.com/</id><author><name>Nikhil Dabas</name></author><entry><title type="html"><![CDATA[Customizing Bootstrap with a build process]]></title><link href="http://www.nikhildabas.com/blog/2013/07/customizing-bootstrap-with-a-build-process" /><published>2013-07-15T18:30:00.0000000Z</published><updated>2013-08-05T19:39:34.5454403Z</updated><id>http://www.nikhildabas.com/blog/2013/07/customizing-bootstrap-with-a-build-process</id><content type="html"><![CDATA[<p>I'm using <a href="http://getbootstrap.com/">Bootstrap</a> to power this blog, and I wanted a way to easily customize some of the defaults, but in a way that would allow me to upgrade to future Bootstrap versions easily, while cutting out the parts of the framework that I did not need. This article is about the technique I came up with to achieve that.</p>

<p>Specifically, I had three goals in mind:</p>

<ul>
<li><strong>Cleanly remove the un-needed bits from Bootstrap.</strong> For example, a blog probably does not need progress bars or modals.</li>
<li><strong>Customize the Bootstrap defaults,</strong> like the typography, without writing additional CSS to override bootstrap.css.</li>
<li><strong>Do all of this without modifying any of the Bootstrap source files.</strong> Instead, create a build process to apply the customizations.</li>
</ul>

<p>Here's a step-by-step guide on how I achieved these goals.</p>

<h2>Step 1: Get the Bootstrap source</h2>

<p><a href="http://bower.io/">Bower</a> is probably the easiest way to get the Bootstrap source code into your project, which will also make updating to future releases easy. Create a <code>bower.json</code> file like this:</p>

<pre><code>{
    "name": "nikhildabas.com",
    "version": "1.0.0",
    "dependencies": {
        "bootstrap": "~3.0.0"
    }
}
</code></pre>

<p>Then <code>bower install</code> downloads the Bootstrap source into <code>bower_components/bootstrap</code>. I'm going to use the LESS source files from the <code>bower_components/bootstrap/less</code> directory.</p>

<h2>Step 2: Include Bootstrap in your own LESS code</h2>

<p>Copy the <code>bootstrap.less</code> and <code>responsive.less</code> files from the Bootstrap source into your own <code>css</code> directory. Then create a <code>site.less</code> file like this:</p>

<pre><code>@import "./bootstrap.less";
@import "./responsive.less";
</code></pre>

<p>The leading <code>./</code> is important because we're going to include the Bootstrap <code>less</code> directory in the LESS include paths; without the <code>./</code>, LESS will pick up these files directly from the Bootstrap source directory and not our customized versions.</p>

<p><strong>Bootstrap v3.x note:</strong> There is no longer a separate <code>responsive.less</code> file, so you need to copy and <code>@import</code> just the <code>bootstrap.less</code> file.</p>

<h2>Step 3: Remove the un-needed bits</h2>

<p>Now that you have your own local copies of <code>bootstrap.less</code> and <code>responsive.less</code>, you can simply comment out the <code>@import</code> statements that you do not need. My <code>bootstrap.less</code> looks like this:</p>

<pre><code>/*!
 * Bootstrap v2.3.2
 *
 * Copyright 2012 Twitter, Inc
 * Licensed under the Apache License v2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Designed and built with all the love in the world @twitter by @mdo and @fat.
 */

// Core variables and mixins
@import "variables.less"; // Modify this for custom colors, font-sizes, etc
@import "mixins.less";

// CSS Reset
@import "reset.less";

// Grid system and page structure
@import "scaffolding.less";
// @import "grid.less";
// @import "layouts.less";

// Base CSS
@import "type.less";
@import "code.less";
// @import "forms.less";
@import "tables.less";

// Components: common
// @import "sprites.less";
// @import "dropdowns.less";
// @import "wells.less";
// @import "component-animations.less";
// @import "close.less";

// Components: Buttons &amp; Alerts
// @import "buttons.less";
// @import "button-groups.less";
// @import "alerts.less"; // Note: alerts share common CSS with buttons and thus have styles in buttons.less

// Components: Nav
// @import "navs.less";
// @import "navbar.less";
// @import "breadcrumbs.less";
@import "pagination.less";
// @import "pager.less";

// Components: Popovers
// @import "modals.less";
// @import "tooltip.less";
// @import "popovers.less";

// Components: Misc
// @import "thumbnails.less";
// @import "media.less";
// @import "labels-badges.less";
// @import "progress-bars.less";
// @import "accordion.less";
// @import "carousel.less";
// @import "hero-unit.less";

// Utility classes
@import "utilities.less"; // Has to be last to override when necessary
</code></pre>

<p>If you're using Bootstrap v2.x, you need to do the same thing with the responsive version -- comment out un-needed bits from your copy of the <code>responsive.less</code> file.</p>

<h3>Is there any Bootstrap left?</h3>

<p>You might say that I've cut out too much out of Bootstrap here, and maybe there wasn't any point to using Bootstrap in the first place. True, but I like the fact that I can easily add any of the modules that I might need later.</p>

<h2>Step 4: Customize variables</h2>

<p>Bootstrap is highly <a href="http://getbootstrap.com/2.3.2/customize.html">customizable</a>; we just need to set some variables. The complete list of variables that you can customize is in <a href="https://github.com/twbs/bootstrap/blob/3.0.0-wip/less/variables.less"><code>variables.less</code> from the Bootstrap source</a>.</p>

<p>For example, to change the default typography, I've added some lines to my <code>site.less</code> file:</p>

<pre><code>@import "./bootstrap.less";
@import "./responsive.less";

// Bootstrap variables
// -------------------

@sansFontFamily: "Source Sans Pro", Helvetica, Arial, sans-serif;
@monoFontFamily: "Source Code Pro", Monaco, Menlo, Consolas, "Courier New", monospace;

@baseFontSize: 15px;
@baseLineHeight: 25px;

@headingsFontWeight: 600;
</code></pre>

<p>In Bootstrap v3.x, the variable names have changed a bit:</p>

<pre><code>@import "./bootstrap.less";

@font-family-sans-serif: "Source Sans Pro", Helvetica, Arial, sans-serif;
@font-family-monospace: "Source Code Pro", Monaco, Menlo, Consolas, "Courier New", monospace;

@font-size-base: 15px;
@line-height-base: 1.5;

@headings-font-weight: 600;
</code></pre>

<p>Note that this must be added <em>after</em> the Bootstrap includes; otherwise, the <code>variables.less</code> from Bootstrap will override our declarations. Interestingly, LESS will use the last declared value of a variable when generating the CSS, even for code that precedes that declaration -- which works to our advantage in this case. Otherwise, we would have had to make a copy of the <code>variables.less</code> flle as well, and edit the variables there.</p>

<h2>Step 5: Build</h2>

<p>Bootstrap uses <a href="http://twitter.github.com/recess">Recess</a> to build and minify the CSS, and you can integrate Recess into your build process as well. Get Recess by installing it with <a href="https://npmjs.org/">npm</a>:</p>

<pre><code>npm install recess
</code></pre>

<p>Then, building the CSS is easy:</p>

<pre><code># Regular build, for debugging
./node_modules/.bin/recess --includePath bower_components/bootstrap/less --compile css/site.less &gt; css/site.css

# Minified build
./node_modules/.bin/recess --includePath bower_components/bootstrap/less --compress css/site.less &gt; css/site.min.css
</code></pre>

<p>For a Makefile-based build, you can add these lines to your Makefile:</p>

<pre><code>css: css/site.css css/site.min.css

css/site.min.css: css/site.less css/bootstrap.less css/responsive.less

css/site.css: css/site.less css/bootstrap.less css/responsive.less

%.min.css: %.less
    ./node_modules/.bin/recess --includePath bower_components/bootstrap/less --compress $&lt; &gt; $@

%.css: %.less
    ./node_modules/.bin/recess --includePath bower_components/bootstrap/less --compile $&lt; &gt; $@
</code></pre>

<p>Now <code>make css</code> will build the CSS (both regular and minified versions) from your customized LESS files.</p>

<h2>Done!</h2>

<p>That's it -- include the compiled and minified <code>site.min.css</code> in your templates now.</p>

<p>For me, this process created a 16KB customized build of Bootstrap, which is less than 15% of the unmodified Bootstrap v2.3.2 + responsive minified CSS files. With Bootstrap v3, I have a 12KB build, which is still under 20% of the Bootstrap v3.0.0-rc1 minified distribution.</p>
]]></content></entry></feed>
